generator client {
  provider = "prisma-client-js"
  seed      = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define AccountType enum
enum AccountType {
  USER
  TAILOR
}

// Define OrderStatus enum
enum OrderStatus {
  PENDING
  ACCEPTED
  COMPLETED
  REJECTED
}

model User {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  email           String?          @unique
  firstName       String?
  middleName      String?
  lastName        String?
  phone           String?          @unique
  walletAddress   String?          @unique
  accountType     AccountType      @default(USER)
  OTPVerification OTPVerification?
  orders          Order[]          // Relation to orders
  
  @@index([phone], map: "phone_idx")
  @@index([email], map: "email_idx")
  @@index([walletAddress], map: "wallet_idx")
}

model OTPVerification {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  otpCode   String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String      @unique
  customerName  String
  userId        Int         // Customer user ID
  tailorId      Int         // Tailor user ID
  status        OrderStatus @default(PENDING)
  price         Float
  txHash        String?
  description   String?
  measurements  Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  
  @@index([status], name: "status_idx")
  @@index([tailorId], name: "tailor_idx")
}

model Waitlist {
  id        Int      @id @default(autoincrement())
  contact   String
  name      String
  isEmail   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
