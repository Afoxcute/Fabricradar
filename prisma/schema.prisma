generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define AccountType enum
enum AccountType {
  USER
  TAILOR
}

// Define OrderStatus enum
enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  email           String?          @unique
  firstName       String?
  middleName      String?
  lastName        String?
  phone           String?          @unique
  walletAddress   String?          @unique
  accountType     AccountType      @default(USER)
  OTPVerification OTPVerification?
  // Add relations
  ordersAsTailor  Order[]          @relation("TailorOrders")
  ordersAsCustomer Order[]         @relation("CustomerOrders")

  @@index([phone], map: "phone_idx")
  @@index([email], map: "email_idx")
  @@index([walletAddress], map: "wallet_idx")
}

model OTPVerification {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  otpCode   String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Waitlist {
  id        Int      @id @default(autoincrement())
  contact   String
  name      String
  isEmail   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           Int         @id @default(autoincrement())
  orderId      String      @unique // Custom order ID format (e.g., ORD001)
  tailorId     Int
  customerId   Int
  status       OrderStatus @default(PENDING)
  price        Float       // Amount in USDC
  txHash       String?     // Blockchain transaction hash
  date         DateTime    @default(now())
  completedAt  DateTime?
  measurements Json?       // Store measurements as JSON data
  notes        String?
  deliveryAddress String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Relations
  tailor      User        @relation("TailorOrders", fields: [tailorId], references: [id])
  customer    User        @relation("CustomerOrders", fields: [customerId], references: [id])

  @@index([tailorId], map: "tailor_idx")
  @@index([customerId], map: "customer_idx")
  @@index([status], map: "status_idx")
}
