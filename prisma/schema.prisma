generator client {
  provider = "prisma-client-js"
  seed      = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define AccountType enum
enum AccountType {
  USER
  TAILOR
}

// Define OrderStatus enum
enum OrderStatus {
  PENDING
  ACCEPTED
  COMPLETED
  REJECTED
}

model User {
  id                  Int             @id @default(autoincrement())
  email               String?         @unique
  phone               String?         @unique
  firstName           String?
  lastName            String?
  middleName          String?
  walletAddress       String?         @unique
  accountType         AccountType     @default(USER)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  // Relation to OTP verification
  otpVerification     OTPVerification?
  
  // Relation to customer orders
  customerOrders      Order[]         @relation
  
  // Relation to tailor orders
  tailorOrders        Order[]         @relation("TailorOrders")
  
  // Optional relations to other models
  designs             Design[]
  waitlist            Waitlist?
}

model OTPVerification {
  id                  Int             @id @default(autoincrement())
  userId              Int             @unique
  otp                 String
  expiresAt           DateTime
  createdAt           DateTime        @default(now())
  
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                  Int         @id @default(autoincrement())
  orderNumber         String      @unique
  customerName        String
  userId              Int?        // Optional user ID
  tailorId            Int?        // Optional tailor ID
  status              OrderStatus @default(PENDING)
  price               Float
  txHash              String?
  description         String?
  measurements        Json?
  delivery            Json?       // Store delivery details as JSON
  paymentMethod       String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  acceptanceDeadline  DateTime?   // Deadline for tailor to accept the order
  
  // Optional relations
  user                User?       @relation(fields: [userId], references: [id])
  tailor              User?       @relation("TailorOrders", fields: [tailorId], references: [id])
  
  @@index([status], name: "status_idx")
  @@index([orderNumber], name: "order_number_idx")
}

model Design {
  id               Int      @id @default(autoincrement())
  title            String
  description      String
  price            Float
  imageUrl         String?
  averageTimeline  String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tailorId         Int      // Tailor user ID
  tailor           User     @relation(fields: [tailorId], references: [id])
  
  @@index([tailorId], name: "design_tailor_idx")
}

model Waitlist {
  id        Int      @id @default(autoincrement())
  contact   String
  name      String
  isEmail   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
